% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vis_temporal_static.R
\name{vis_temporal_static}
\alias{vis_temporal_static}
\title{Plot epicontacts objects using ggplot}
\usage{
vis_temporal_static(x, x_axis, edge_alpha = NULL,
  network_shape = "branching", root_order = "subtree_size",
  node_order = "subtree_size", reverse_root_order = FALSE,
  reverse_node_order = FALSE, lineend = c("butt", "round", "square"),
  unlinked_pos = c("bottom", "top", "middle"), position_dodge = FALSE,
  parent_pos = c("middle", "top", "bottom"), custom_parent_pos = NULL,
  y_label = NULL, node_label = NULL, y_coor = NULL,
  igraph_type = NULL, col_pal = cases_pal, edge_col_pal = edges_pal,
  ...)
}
\arguments{
\item{x}{An \code{\link{epicontacts}} object.}

\item{x_axis}{A character string indicating which field of the linelist data
should be used to specify the x axis position (must be numeric or Date).}

\item{edge_alpha}{An integer/numeric indicating the global transparency of
the edges, or a character string indicating which field of the contacts data
should be used to indicate the edge transparency.}

\item{network_shape}{"branching" will create a branching transmission
tree. "rectangle" will create a rectangular shaped plot similar to a
phylogeny that avoids overlapping edges.}

\item{root_order}{A character string indicating which field of the linelist
data is used to vertically order index cases of individual transmission
chains (i.e. the "roots" of the transmission trees). If root_order =
"size", index cases will be ordered by the size of the downstream
transmission chains they generate.}

\item{node_order}{A character string indicating which field of the linelist
data is used to vertically order nodes in the transmission tree. If
node_order = "size", nodes will be ordered by the size of the downstream
transmission chains they generate.}

\item{reverse_root_order}{A logical indicating if the ordering of the roots
should be reversed. This argument is only called when type = "ttree".}

\item{reverse_node_order}{A logical indicating if the ordering of the nodes
should be reversed. This argument is only called when type = "ttree".}

\item{lineend}{Character indicating the lineend to be used for
geom_segment. One of "round", "butt" or "square".}

\item{unlinked_pos}{A character string indicating where unlinked cases
should be placed. Valid options are "top", "bottom" and "middle", where
"middle" will place unlinked cases according to root_order. This argument
is only called when type = "ttree".}

\item{position_dodge}{A logical indicating if two cases can occupy the same y
coordinate or "dodge" each other. This argument is only called when type =
"ttree".}

\item{parent_pos}{Specify the position of the parent node relative to its
children. Can be one of "middle", "top" or "bottom".}

\item{custom_parent_pos}{A function specifying the position of children nodes
relative to their parent. This function must accept a single integer `x` as
its only argument, specifying the number of children nodes. It must return
a vector of length x, specifying the position of each child relative to the
parent, where a x > 0 indicates above the parent, x < 0 indicates below the
parent, and x = 0 indicates the same height as the parent.}

\item{y_label}{A character string which element of the linelist should be
displayed on the y-axis labels. If NULL, no y-axis labels are
provided. Only works when position_dodge = TRUE, otherwise y-coordinates
are not unique.}

\item{node_label}{A character string which element of the linelist should be
display node labels. If NULL, node labels are provided.}

\item{y_coor}{Manual specification of y coordinates. Must be a vector with one
y coordinate for each case between 0 and 1.}

\item{igraph_type}{Alternate tree layouts provided by igraph. Must be one of
"rt" for Reingold-Tilford layout, "sugiyama" for Sugiyama layout or "fr"
for Fruchterman-Reingold layout.}

\item{col_pal}{A color palette for the nodes. Must be a function accepting a
single number n and returning a vector of n colors.}

\item{edge_col_pal}{A color palette for the edges. Must be a function accepting a
single number n and returning a vector of n colors.}

\item{...}{Additional arguments specified in \code{vis_epicontacts}.}
}
\value{
The same output as \code{ggplot2}.
}
\description{
This function plots \code{\link{epicontacts}} objects using the
\code{ggplot2} package. This output is only available for directed, acyclical
networks with one incoming edge per node (e.g. a transmission network with
only one infector per case)
}
\examples{
if (require(outbreaks)) {

## example using MERS outbreak in Korea, 2014
head(mers_korea_2015[[1]])
head(mers_korea_2015[[2]])

x <- make_epicontacts(linelist=mers_korea_2015[[1]],
                       contacts = mers_korea_2015[[2]],
                       directed=TRUE)

\dontrun{
plot(x, method = "ggplot", x_axis = "dt_onset", node_color = "sex")
}
}
}
\seealso{
\code{\link[ggplot2]{ggplot}} in the package \code{ggplot2}.
  \code{\link{edges_pal}} and \code{\link{cases_pal}} for color palettes used
}
\author{
Finlay Campbell (\email{f.campbell15@imperial.ac.uk})
}
