% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vis_epicontacts.R
\name{vis_epicontacts}
\alias{vis_epicontacts}
\title{Plot epicontacts objects using visNetwork}
\usage{
vis_epicontacts(x, type = "network", node_color = "id",
  node_shape = NULL, node_size = 20, edge_color = NULL,
  edge_width = 3, edge_linetype = NULL, edge_label = NULL,
  col_pal = cases_pal, edge_col_pal = edges_pal,
  NA_col = "lightgrey", shapes = NULL, size_range = c(5, 20),
  width_range = c(1, 5), label = "id", annot = TRUE,
  width = "90\%", height = "700px", legend = TRUE, legend_max = 10,
  thin = TRUE, selector = TRUE, editor = FALSE, x_axis = NULL,
  ttree_shape = "branching", root_order = "size",
  node_order = "onset", reverse_root_order = FALSE,
  reverse_node_order = FALSE, rank_contact = x_axis,
  reverse_rank_contact = FALSE, position_unlinked = "bottom",
  edge_flex = FALSE, highlight_downstream = FALSE,
  position_dodge = FALSE, split_type = 2, ...)
}
\arguments{
\item{x}{An \code{\link{epicontacts}} object.}

\item{type}{A character string indicating the type of plot. 'network' will
use the visNetwork physics engine to determine node positions and can be
used for all network types. 'ttree' calculates node positions manually and
is designed specifically for visualising transmission trees. 'ttree' only
works for acyclical networks with one ingoing edge per node (i.e. one
infector per individual).}

\item{node_color}{An index or character string indicating which field of the
linelist should be used to color the nodes. If node color = 'R_i', the
individual reproductive number for each case (i.e. number of outgoing
infection/contacts) will be calculated and used to specify the node colour.}

\item{node_shape}{An index or character string indicating which field of the
linelist should be used to determine the shapes of the nodes. If node color
= 'R_i', the individual reproductive number for each case (i.e. number of
outgoing infection/contacts) will be calculated and used to specify the
node shape.}

\item{node_size}{An integer indicating the size of the nodes, or a
character string indicating which field of the linelist should be used
to determine the size of the node. Defaults to 3. If node color = 'R_i', the
individual reproductive number for each case (i.e. number of outgoing
infection/contacts) will be calculated and used to specify the node size.}

\item{edge_color}{An index or character string indicating which field of the
contacts data should be used to color the edges of the graph.}

\item{edge_width}{An integer indicating the width of the edges, or a
character string indicating which field of the contacts data should be used
to determine the width of the edge. Defaults to 3.}

\item{edge_linetype}{An integer or character string indicating which field of
the contacts data should be used to indicate the edge linetype. If the
output format is visNetwork, this field of the contacts data must contain a
binary variable, as visNetwork only supports dashed/non-dashed edges.}

\item{edge_label}{An index or character string indicating which field of the
contacts data should be used to label the edges of the graph.}

\item{col_pal}{A color palette for the nodes.}

\item{edge_col_pal}{A color palette for the edges.}

\item{NA_col}{The color used for unknown group.}

\item{shapes}{A named vector of characters indicating which icon code should
be used for each value \code{node_shape}, e.g. \code{c(m = "male", f =
"female")} if 'm' amd 'f' are values from \code{node_shape}. See
\code{\link{codeawesome}} for all available codes.}

\item{size_range}{A numeric vector of length 2, indicating the minimum and
maximum node size.}

\item{width_range}{A numeric vector of length 2, indicating the minimum and
maximum edge width.}

\item{label}{An index, logical, or character string indicating which fields
of the linelist should be used for labelling the nodes. Logical will be
recycled if necessary, so that the default \code{TRUE} effectively uses all
columns of the linelist.}

\item{annot}{An index, logical, or character string indicating which fields
of the linelist should be used for annotating the nodes. Logical will be
recycled if necessary, so that the default \code{TRUE} effectively uses all
columns of the linelist.}

\item{width}{The width of the output, in html compatible format (e.g. '90\%'
or '800px').}

\item{height}{The height of the output, in html compatible format
(e.g. '800px').}

\item{legend}{A logical indicating whether a legend should be added to the
plot.}

\item{legend_max}{The maximum number of groups for a legend to be displayed.}

\item{thin}{A logical indicating if the data should be thinned with
\code{\link{thin}} so that only cases with contacts should be plotted.}

\item{selector}{A logical indicating if the selector tool should be used;
defaults to TRUE.}

\item{editor}{A logical indicating if the editor tool should be used;
defaults to FALSE.}

\item{x_axis}{A character string indicating which field of the linelist data
should be used to specify the x axis position (must be numeric or Date).}

\item{ttree_shape}{'branching' will create a branching transmission
tree. 'rectangle' will create a rectangular shaped plot similar to a
phylogeny that avoids overlapping edges. This argument is only called when
type = 'ttree'.}

\item{root_order}{A character string indicating which field of the linelist
data is used to vertically order index cases of individual transmission
chains (i.e. the 'roots' of the transmission trees). If root_order =
'size', index cases will be ordered by the size of the downstream
transmission chains they generate. This argument is only called when type =
'ttree'.}

\item{node_order}{A character string indicating which field of the linelist
data is used to vertically order nodes in the transmission tree (i.e. the
'roots' of the transmission trees). If node_order = 'size', nodes will be
ordered by the size of the downstream transmission chains they generate.
This argument is only called when type = 'ttree'.}

\item{reverse_root_order}{A logical indicating if the ordering of the roots
hsould be reversed. This argument is only called when type = 'ttree'.}

\item{reverse_node_order}{A logical indicating if the ordering of the nodes
should be reversed. This argument is only called when type = 'ttree'.}

\item{rank_contact}{If more than one incoming contact is provided for a given
case, which attribute in the linelist should be used to rank the contacts
and choose the top value. This contact forms the 'backbone' of the
transmission tree and determines the y-position of the case.}

\item{reverse_rank_contact}{Logical indicating if the contact ranking should
be reversed in order.}

\item{position_unlinked}{A character string indicating where unlinked cases
should be placed. Valid options are 'top', 'bottom' and 'middle', where
'middle' will place unlinked cases according to root_order. This argument
is only called when type = 'ttree'.}

\item{edge_flex}{A logical indicating if edges should bend when moved in
visNetwork. If FALSE, edges will remain straight. This argument
is only called when type = 'ttree' and ttree_output = 'visNetwork'.}

\item{highlight_downstream}{A logical indicating if all cases 'downstream' of
the the selected node should be highlighted. Defaults to FALSE if type =
'network' and defaults to TRUE if type = 'ttree'.}

\item{position_dodge}{A logical indicating if two cases can occupy the same y
coordinate or 'dodge' each other. This argument is only called when type =
'ttree'.}

\item{split_type}{If 1, the parent node is positioned in the middle of its
downstream nodes. If 2, the parent node is found at the top. If 3, at the
bottom.}

\item{...}{Further arguments to be passed to \code{visNetwork}.}
}
\value{
The same output as \code{visNetwork}.
}
\description{
This function plots \code{\link{epicontacts}} objects using the
\code{visNetwork} package. The produced object is an \code{htmlwidget} which
will need rendering within a web browser.
}
\examples{
if (require(outbreaks)) {

## example using MERS outbreak in Korea, 2014
head(mers_korea_2015[[1]])
head(mers_korea_2015[[2]])

x <- make_epicontacts(linelist=mers_korea_2015[[1]],
                       contacts = mers_korea_2015[[2]],
                       directed=TRUE)

\dontrun{
plot(x)
plot(x, node_color = "place_infect")
# show transmission tree with time as the horizontal axis, showing all nodes
vis_epicontacts(x, x_axis = "dt_onset", thin = FALSE) 
plot(x, node_color = "loc_hosp", legend_max=20, annot=TRUE)
plot(x, node_color = "loc_hosp", legend_max=20, annot=TRUE, x_axis = "dt_onset")
plot(x, "place_infect", node_shape = "sex",
     shapes = c(M = "male", F = "female"))

plot(x, "sex", node_shape = "sex", shapes = c(F = "female", M = "male"),
     edge_label = "exposure", edge_color = "exposure")
}
}
}
\seealso{
\code{\link[visNetwork]{visNetwork}} in the package \code{visNetwork}.
  \code{\link{edges_pal}} and \code{\link{cases_pal}} for color palettes used
}
\author{
Thibaut Jombart (\email{thibautjombart@gmail.com})
VP Nagraj (\email{vpnagraj@virginia.edu})
Zhian N. Kamvar (\email{zkamvar@gmail.com})
Finlay Campbell (\email{f.campbell15@imperial.ac.uk})
}
